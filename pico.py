import math
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def gcd(a, b): 
  
    if (a == 0): 
        return b 
    return gcd(b % a, a)

def phi(n): 
  
    result = 1
    for i in range(2, n): 
        if (gcd(i, n) == 1): 
            result+=1
    return result 
   
def phi_two(q, p):
    q = q -1
    p = p -1 
    return q * p
    
def iroot(k, n):
    u, s = n, n+1
    while u < s:
        s = u
        t = (k-1) * s + n // pow(s, k-1)
        u = t // k
    return s
n = 13560417960801296839882552449418731731399677948669445254256179042180371513049687
#p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
#q = n / p
e = 65537
#phi = phi(n)
c = 11979998127328309483755159511700985576751434399944560644272745062116136412266657

#d = 11249620277260260736493499765360743175678915580377635061547739419630203072966392
d =  modinv(e, n)
print d
1021317628866569678214494683807765890552004323556950987312904254273855967240404229687321920774113531353309058801650117748282449429534527831526726955433537842422750995408367392389615393138286228321608610204291980950474688151965286170998997753025612993603377505346459549402364940463071518321965380953981837
#print n
#x =  2205316413931134031046440767620541984801091216351222789180593875373829950860542792110364325728088504479780803714561464250589795961097670884274813261496112882580892020487261058118157619586156815531561455215290361274334977137261636930849125 ** 3
#print x
#print x % n
# D = 232090017039379620941582149411005346720036016154747258099258175670240275266053377370543133895187036673098124917725486421794871894564257182887949472012324016772235997598559829941232312281741562756820071589674847373169652725135709705123641203225818305899493434046795277007635702859705572766056279941829066
#print iroot(2205316413931134031046440767620541984801091216351222789180593875373829950860542792110364325728088504479780803714561464250589795961097670884274813261496112882580892020487261058118157619586156815531561455215290361274334977137261636930849125, 3)
893887504690392820638378600918539954071845726463729762686245696712627201749694290077771929641267193945315897516888792007230598938351307761934133296592682621582943313237044410930385231617635012267813760389313823757777109307359237333810027313775778518681000801371850487907636740634637542666575900080961590